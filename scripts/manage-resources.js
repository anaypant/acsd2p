#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * ACS Resource Management Script
 * This script helps manage existing resources and provides deployment guidance
 */

const STAGE = process.argv[2] || 'dev';
const REGION = STAGE === 'dev' ? 'us-west-1' : 'us-east-2';

console.log(`üîß ACS Resource Management for ${STAGE.toUpperCase()} environment`);
console.log(`   Region: ${REGION}\n`);

function runCommand(command) {
  try {
    return execSync(command, { encoding: 'utf8', stdio: 'pipe' });
  } catch (error) {
    return null;
  }
}

function checkExistingResources() {
  console.log('üîç Checking for existing resources...\n');
  
  const getResourceName = (name) => `${STAGE}-${name}`;
  
  // Check DynamoDB tables
  console.log('üìä Checking DynamoDB tables...');
  const dynamoDBTables = [
    'Users',
    'Conversations', 
    'Threads',
    'Organizations',
    'RateLimiting'
  ];
  
  const existingTables = [];
  dynamoDBTables.forEach(tableName => {
    const fullTableName = getResourceName(tableName);
    const result = runCommand(`aws dynamodb describe-table --table-name ${fullTableName} --region ${REGION} 2>/dev/null`);
    if (result) {
      existingTables.push(fullTableName);
      console.log(`   ‚úÖ ${fullTableName} - EXISTS`);
    } else {
      console.log(`   ‚ùå ${fullTableName} - NOT FOUND`);
    }
  });
  
  // Check S3 buckets
  console.log('\nü™£ Checking S3 buckets...');
  const s3Buckets = [
    'storage',
    'email-attachments'
  ];
  
  const existingBuckets = [];
  s3Buckets.forEach(bucketName => {
    const fullBucketName = getResourceName(bucketName).toLowerCase();
    const result = runCommand(`aws s3api head-bucket --bucket ${fullBucketName} --region ${REGION} 2>/dev/null`);
    if (result !== null) {
      existingBuckets.push(fullBucketName);
      console.log(`   ‚úÖ ${fullBucketName} - EXISTS`);
    } else {
      console.log(`   ‚ùå ${fullBucketName} - NOT FOUND`);
    }
  });
  
  // Check SQS queues
  console.log('\nüì¨ Checking SQS queues...');
  const sqsQueues = [
    'EmailProcessQueue',
    'EmailProcessDLQ'
  ];
  
  const existingQueues = [];
  sqsQueues.forEach(queueName => {
    const fullQueueName = getResourceName(queueName);
    const result = runCommand(`aws sqs get-queue-url --queue-name ${fullQueueName} --region ${REGION} 2>/dev/null`);
    if (result) {
      existingQueues.push(fullQueueName);
      console.log(`   ‚úÖ ${fullQueueName} - EXISTS`);
    } else {
      console.log(`   ‚ùå ${fullQueueName} - NOT FOUND`);
    }
  });
  
  // Check Cognito User Pool
  console.log('\nüë• Checking Cognito User Pool...');
  const userPoolName = getResourceName('UserPool');
  const userPoolResult = runCommand(`aws cognito-idp list-user-pools --max-items 20 --region ${REGION} 2>/dev/null`);
  let existingUserPoolId = null;
  
  if (userPoolResult) {
    try {
      const userPools = JSON.parse(userPoolResult);
      const userPool = userPools.UserPools.find(pool => pool.Name === userPoolName);
      if (userPool) {
        existingUserPoolId = userPool.Id;
        console.log(`   ‚úÖ User Pool ${userPoolName} - EXISTS (ID: ${existingUserPoolId})`);
      } else {
        console.log(`   ‚ùå User Pool ${userPoolName} - NOT FOUND`);
      }
    } catch (e) {
      console.log(`   ‚ùå Error parsing Cognito response`);
    }
  } else {
    console.log(`   ‚ùå User Pool ${userPoolName} - NOT FOUND`);
  }
  
  return {
    existingTables,
    existingBuckets,
    existingQueues,
    existingUserPoolId
  };
}

function generateEnvFile(existingResources) {
  const envPath = path.join(__dirname, '../.env.local');
  const templatePath = path.join(__dirname, '../config.env');
  
  console.log('\nüìù Generating .env.local file...');
  
  let envContent = `# ACS CDK Infrastructure Configuration
# Generated by manage-resources.js on ${new Date().toISOString()}

# Environment selection
ENVIRONMENT=${STAGE}

`;

  if (existingResources.existingUserPoolId) {
    console.log('   üîó Found existing Cognito User Pool - will import');
    envContent += `# Existing Cognito User Pool Configuration
EXISTING_USER_POOL_ID=${existingResources.existingUserPoolId}
# Note: You'll need to manually add EXISTING_USER_POOL_CLIENT_ID and EXISTING_USER_POOL_CLIENT_SECRET
# Run: aws cognito-idp list-user-pool-clients --user-pool-id ${existingResources.existingUserPoolId} --region ${REGION}
`;
  } else {
    console.log('   üÜï No existing Cognito User Pool found - will create new one');
    envContent += `# No existing Cognito User Pool found - new one will be created
# EXISTING_USER_POOL_ID=
# EXISTING_USER_POOL_CLIENT_ID=
# EXISTING_USER_POOL_CLIENT_SECRET=
`;
  }
  
  envContent += `
# AWS Configuration
AWS_DEFAULT_REGION=${REGION}
`;
  
  fs.writeFileSync(envPath, envContent);
  console.log(`   ‚úÖ Created ${envPath}`);
  
  return envPath;
}

function provideDeploymentGuidance(existingResources) {
  console.log('\nüöÄ Deployment Guidance:');
  
  const hasExistingResources = existingResources.existingTables.length > 0 || 
                              existingResources.existingBuckets.length > 0 || 
                              existingResources.existingQueues.length > 0;
  
  if (hasExistingResources) {
    console.log('   üìã You have existing resources. The deployment will:');
    console.log('      - Import existing DynamoDB tables, S3 buckets, and SQS queues');
    console.log('      - Create new Lambda functions and API Gateway');
    console.log('      - Preserve all existing data');
    console.log('');
    console.log('   ‚úÖ Safe to deploy - existing data will be preserved');
  } else {
    console.log('   üìã No existing resources found. The deployment will:');
    console.log('      - Create all resources from scratch');
    console.log('      - Set up complete infrastructure');
    console.log('');
    console.log('   ‚úÖ Safe to deploy - fresh infrastructure will be created');
  }
  
  console.log('\n   üìù Next steps:');
  console.log(`   1. Review the generated .env.local file`);
  if (existingResources.existingUserPoolId) {
    console.log(`   2. Add Cognito client credentials to .env.local (if needed)`);
  }
  console.log(`   3. Run: npx cdk deploy --context env=${STAGE}`);
  console.log(`   4. Monitor the deployment for any issues`);
}

function main() {
  try {
    // Check if AWS CLI is configured
    const awsIdentity = runCommand('aws sts get-caller-identity');
    if (!awsIdentity) {
      console.log('‚ùå AWS CLI not configured or no access');
      console.log('   Please run: aws configure');
      process.exit(1);
    }
    
    const existingResources = checkExistingResources();
    const envPath = generateEnvFile(existingResources);
    provideDeploymentGuidance(existingResources);
    
    console.log('\n‚úÖ Resource management complete!');
    console.log(`   Configuration file: ${envPath}`);
    
  } catch (error) {
    console.error('‚ùå Error during resource management:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { checkExistingResources, generateEnvFile }; 