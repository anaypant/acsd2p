#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * Quick Deployment Script for ACS CDK
 * This script helps resolve deployment issues with existing resources
 */

const STAGE = process.argv[2] || 'dev';
const REGION = STAGE === 'dev' ? 'us-west-1' : 'us-east-2';

console.log(`üöÄ ACS Quick Deployment for ${STAGE.toUpperCase()} environment`);
console.log(`   Region: ${REGION}\n`);

function runCommand(command, showOutput = true) {
  try {
    const result = execSync(command, { encoding: 'utf8', stdio: showOutput ? 'inherit' : 'pipe' });
    return result;
  } catch (error) {
    if (showOutput) {
      console.error(`‚ùå Command failed: ${command}`);
      console.error(`   Error: ${error.message}`);
    }
    return null;
  }
}

function createEnvFile() {
  const envPath = path.join(__dirname, '../.env.local');
  
  if (fs.existsSync(envPath)) {
    console.log('‚úÖ .env.local file already exists');
    return envPath;
  }
  
  console.log('üìù Creating .env.local file...');
  const envContent = `# ACS CDK Infrastructure Configuration
# Generated by quick-deploy.js

# Environment selection
ENVIRONMENT=${STAGE}

# AWS Configuration
AWS_DEFAULT_REGION=${REGION}

# Note: If you have existing Cognito resources, add them here:
# EXISTING_USER_POOL_ID=us-west-1_xxxxxxxxx
# EXISTING_USER_POOL_CLIENT_ID=xxxxxxxxxxxxxxxxxxxxxxxxxx
# EXISTING_USER_POOL_CLIENT_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxx
`;
  
  fs.writeFileSync(envPath, envContent);
  console.log(`   ‚úÖ Created ${envPath}`);
  return envPath;
}

function checkDeploymentStatus() {
  console.log('üîç Checking current deployment status...');
  
  // Check if stack exists
  const stackName = `Acsd2PStack-${STAGE.charAt(0).toUpperCase() + STAGE.slice(1)}`;
  const stackExists = runCommand(`aws cloudformation describe-stacks --stack-name ${stackName} --region ${REGION}`, false);
  
  if (stackExists) {
    console.log(`   ‚úÖ Stack ${stackName} exists`);
    
    // Check stack status
    try {
      const stackInfo = JSON.parse(stackExists);
      const status = stackInfo.Stacks[0].StackStatus;
      console.log(`   üìä Stack Status: ${status}`);
      
      if (status.includes('FAILED') || status.includes('ROLLBACK')) {
        console.log('   ‚ö†Ô∏è  Stack is in a failed state');
        return 'failed';
      } else if (status.includes('PROGRESS')) {
        console.log('   ‚è≥ Stack deployment in progress');
        return 'in-progress';
      } else {
        console.log('   ‚úÖ Stack is stable');
        return 'stable';
      }
    } catch (e) {
      console.log('   ‚ùì Could not determine stack status');
      return 'unknown';
    }
  } else {
    console.log(`   ‚ùå Stack ${stackName} does not exist`);
    return 'not-exists';
  }
}

function suggestDeploymentStrategy(status) {
  console.log('\nüìã Deployment Strategy:');
  
  switch (status) {
    case 'not-exists':
      console.log('   üÜï Fresh deployment - creating all resources');
      console.log('   ‚úÖ Safe to proceed with normal deployment');
      break;
      
    case 'stable':
      console.log('   üîÑ Update deployment - updating existing resources');
      console.log('   ‚úÖ Safe to proceed with normal deployment');
      break;
      
    case 'failed':
      console.log('   üö® Failed stack detected');
      console.log('   üí° Options:');
      console.log('      1. Delete failed stack: aws cloudformation delete-stack --stack-name Acsd2PStack-Dev --region us-west-1');
      console.log('      2. Continue with deployment (may fail again)');
      console.log('      3. Use resource management script: node scripts/manage-resources.js dev');
      break;
      
    case 'in-progress':
      console.log('   ‚è≥ Deployment already in progress');
      console.log('   üí° Wait for current deployment to complete');
      break;
      
    default:
      console.log('   ‚ùì Unknown stack status');
      console.log('   üí° Proceed with caution');
  }
}

function deploy() {
  console.log('\nüöÄ Starting deployment...');
  
  const command = `npx cdk deploy --context env=${STAGE}`;
  console.log(`   Running: ${command}`);
  
  const result = runCommand(command);
  
  if (result !== null) {
    console.log('\n‚úÖ Deployment completed successfully!');
  } else {
    console.log('\n‚ùå Deployment failed');
    console.log('\nüí° Troubleshooting tips:');
    console.log('   1. Check AWS credentials: aws sts get-caller-identity');
    console.log('   2. Check region: aws configure get region');
    console.log('   3. Use resource management: node scripts/manage-resources.js dev');
    console.log('   4. Check CloudFormation events in AWS Console');
  }
}

function main() {
  try {
    // Check AWS CLI
    const awsIdentity = runCommand('aws sts get-caller-identity', false);
    if (!awsIdentity) {
      console.log('‚ùå AWS CLI not configured');
      console.log('   Please run: aws configure');
      process.exit(1);
    }
    
    // Create environment file
    const envPath = createEnvFile();
    
    // Check deployment status
    const status = checkDeploymentStatus();
    
    // Suggest strategy
    suggestDeploymentStrategy(status);
    
    // Ask for confirmation
    console.log('\n‚ùì Do you want to proceed with deployment? (y/N)');
    console.log('   Press Enter to continue or Ctrl+C to cancel...');
    
    // For now, proceed automatically
    console.log('   Proceeding with deployment...\n');
    
    // Deploy
    deploy();
    
  } catch (error) {
    console.error('‚ùå Error during quick deployment:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { createEnvFile, checkDeploymentStatus, deploy }; 